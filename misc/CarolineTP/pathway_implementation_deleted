from cobra import Model, Reaction, Metabolite

# 5 metabolites
zymosterol = model.metabolites.get_by_id('zymst_c') # found in the model
zymosterol.id = "zymosterol"

dehydrocholesterol = Metabolite(
    '7-dehydrocholersterol', 
    formula = 'C27H44O',
    name = 'cholesterol-precursor',
    compartment = 'c')

cholesterol = Metabolite(
    'cholesterol',
    formula = 'C27H46O',
    name = 'membrane-structure-steroid',
    compartment = 'c')

pregnenolone = Metabolite(
    'pregnenolone',
    formula = 'C21H32O2',
    name = 'steroid-hormone-precursor',
    compartment = 'c')

# 4 reactions
dehydrocholesterol_reductase_24 = Reaction('DHCR24')
dehydrocholesterol_reductase_7 = Reaction('DHCR7')
cholesterol_side_chain_cleavage_enzyme = Reaction('CYP11A1')
hydroxysteroid_dehydrogenase_3_beta = Reaction('3beta-HSD')

# FSEOF
df.T.plot()
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.xlabel("Increasing progesterone flux");
plt.ylabel(r"Flux $\left[\dfrac{mmol}{gDW\cdot h}\right]$");
plt.show()

# Reactions where there is a significant flux change
df = df.sort_values([1], ascending = False) # sorting the dataframe
lmt = 3
significant_flux_change = ((df > lmt) | (df < -lmt)).all(axis=1)
df = df.loc[significant_flux_change] # removing reactions from dataframe
df

df.T.plot()
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.xlabel("Increasing progesterone flux");
plt.ylabel(r"Flux $\left[\dfrac{mmol}{gDW\cdot h}\right]$");
plt.show()

# plot of reactions with highest relative flux change
target_reactions_df_plot = target_reactions_df.iloc[:,:10]
target_reactions_df_plot = target_reactions_df_plot.sort_values([1], ascending = False)
fig = target_reactions_df_plot.plot(legend=None, kind='bar', figsize=(25, 10), grid =False);
fig.set_ylabel('Change in flux')
fig.set_xlabel('Reaction ID')
fig.set_title('Flux scanning based on Enforced Objective Flux', size=25)

from cobra.io import write_sbml_model
model_ERG2_overexp = model.copy()
# Saving new model
outfilename = "models/iMM904_progesterone_Boundary_TEST.xml"
model_ERG2_overexp.id = outfilename.split("/")[-1].split(".")[0]
print(f"Saving to {outfilename}")
write_sbml_model(model_ERG2_overexp, outfilename)

# Load model
infilename = 'models/iMM904_progesterone_Boundary_TEST.xml'
print(f"Loading {infilename}")
model_boundary_test = read_sbml_model(infilename)

model_boundary_test.reactions.GLYCDy.lower_bound

# Progesterone production
with model:
    model.objective = model.reactions.R02216
    print('Progesterone when complete model: ', round(model.optimize().objective_value,3))
with model_ERG5_ERG6:
    model_ERG5_ERG6.objective = model_ERG5_ERG6.reactions.R02216
    print('Progesterone when ERG5 and ERG6 is knocked out: ', round(model_ERG5_ERG6.optimize().objective_value,3))

model.reactions.R02216.upper_bound

print(model.reactions.get_by_id(target_reactions_df.index.values[i]).id, model.reactions.get_by_id(target_reactions_df.index.values[i]).name, model.reactions.get_by_id(target_reactions_df.index[i]))